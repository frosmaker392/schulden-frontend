### This file was generated by Nexus Schema
### Do not make changes to this file directly

type AuthPayload {
  token: String!
  user: User!
}

type DebtSummary {
  topDebtors: [Debtor!]!
  totalAmount: Float!
}

type Debtor {
  amount: Float!
  person: Person!
}

input DebtorInputType {
  amount: Float!
  personId: String!
}

type Expense {
  debtors: [Debtor!]!
  id: String!
  name: String!
  payer: Person!
  timestamp: String!
  totalAmount: Float!
}

type Mutation {
  createExpense(
    debtors: [DebtorInputType!]!
    name: String!
    payerId: String!
    totalAmount: Float!
  ): Expense!
  createOfflinePerson(name: String!): OfflinePerson!
  deleteExpense(expenseId: String!): Expense!
  login(email: String!, password: String!): AuthPayload!
  register(email: String!, password: String!, username: String!): AuthPayload!
}

type OfflinePerson implements Person {
  id: ID!
  name: String!
}

interface Person {
  id: ID!
  name: String!
}

type Query {
  currentUser: User
  findPersons(name: String!): [Person!]!
  getAllDebts: [Debtor!]!
  getAllExpenses: [Expense!]!
  getAllRelatedExpenses(personId: String!): [Expense!]!
  getDebtSummary: DebtSummary!
  getExpense(expenseId: String!): Expense!
  getPerson(id: String!): Person!
}

type User implements Person {
  email: String!
  id: ID!
  name: String!
}
