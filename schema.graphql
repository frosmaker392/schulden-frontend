### This file was generated by Nexus Schema
### Do not make changes to this file directly

type AuthPayload {
  token: String!
  user: User!
}

union AuthResult = AuthPayload | Error

type Debtor {
  amount: Float!
  person: Person!
}

input DebtorInputType {
  amount: Float!
  personId: String!
}

type Error {
  errorMessage: String!
}

type Expense {
  debtors: [Debtor!]!
  id: String!
  name: String!
  payer: Person!
  timestamp: String!
  totalAmount: Float!
}

union ExpenseResult = Error | Expense

type Expenses {
  expenses: [Expense!]!
}

union ExpensesResult = Error | Expenses

type Mutation {
  createExpense(
    debtors: [DebtorInputType!]!
    name: String!
    payerId: String!
    totalAmount: Float!
  ): ExpenseResult!
  deleteExpense(expenseId: String!): ExpenseResult!
  login(email: String!, password: String!): AuthResult!
  register(email: String!, password: String!, username: String!): AuthResult!
}

type OfflinePerson implements Person {
  id: ID!
  name: String!
}

interface Person {
  id: ID!
  name: String!
}

type Persons {
  persons: [Person!]!
}

union PersonsResult = Error | Persons

type Query {
  currentUser: UserResult
  findPersons(name: String!): PersonsResult!
  getAllExpenses: ExpensesResult!
  getAllRelatedExpenses(personId: String!): ExpensesResult!
}

type RegisterValidationError {
  emailErrorMessage: String
  passwordErrorMessage: String
  usernameErrorMessage: String
}

type User implements Person {
  email: String!
  id: ID!
  name: String!
}

union UserResult = Error | User
